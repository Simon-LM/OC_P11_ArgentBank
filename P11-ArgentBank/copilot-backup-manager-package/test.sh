#!/bin/bash

# üöÄ Script de test pour v√©rifier l'installation
echo "üîç Test du Copilot Backup Manager..."

# V√©rifier que les fichiers existent
echo "üìã V√©rification des scripts..."

SCRIPTS_DIR="scripts"
REQUIRED_SCRIPTS=(
    "clean-copilot-backups.sh"
    "sync-package-manager.sh" 
    "commit-ready.sh"
    "pre-commit-hook.sh"
    "install-git-hooks.sh"
)

for script in "${REQUIRED_SCRIPTS[@]}"; do
    if [ -f "$SCRIPTS_DIR/$script" ]; then
        echo "‚úÖ $script"
    else
        echo "‚ùå $script manquant"
    fi
done

# V√©rifier la configuration VS Code
echo ""
echo "üìã V√©rification VS Code..."
if [ -f ".vscode/settings.json" ]; then
    echo "‚úÖ .vscode/settings.json configur√©"
else
    echo "‚ùå .vscode/settings.json manquant"
fi

# V√©rifier le package.json
echo ""
echo "üìã V√©rification package.json..."
if grep -q "clean:copilot" package.json 2>/dev/null; then
    echo "‚úÖ Scripts npm ajout√©s"
else
    echo "‚ùå Scripts npm manquants"
fi

# V√©rifier le hook Git
echo ""
echo "üìã V√©rification hook Git..."
GIT_DIR=$(git rev-parse --git-dir 2>/dev/null)
if [ -f "$GIT_DIR/hooks/pre-commit" ]; then
    echo "‚úÖ Hook pre-commit install√©"
else
    echo "‚ùå Hook pre-commit manquant"
fi

# Test fonctionnel
echo ""
echo "üß™ Test fonctionnel..."
if [ -f "package.json" ]; then
    PACKAGE_MANAGER="npm"
    if [ -f "pnpm-lock.yaml" ]; then
        PACKAGE_MANAGER="pnpm"
    elif [ -f "yarn.lock" ]; then
        PACKAGE_MANAGER="yarn"
    fi
    
    echo "Ex√©cution de: $PACKAGE_MANAGER run clean:copilot"
    $PACKAGE_MANAGER run clean:copilot
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Test fonctionnel r√©ussi"
    else
        echo "‚ùå Test fonctionnel √©chou√©"
    fi
else
    echo "‚ùå package.json introuvable"
fi

echo ""
echo "üéâ Test termin√©!"

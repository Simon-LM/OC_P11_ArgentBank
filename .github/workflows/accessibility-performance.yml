# @format

name: ♿ Accessibility & Performance

permissions:
  contents: read
  pull-requests: write
  issues: write

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

defaults:
  run:
    working-directory: P11-ArgentBank

jobs:
  cypress-e2e:
    name: 🏃 Cypress E2E Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"
          cache-dependency-path: P11-ArgentBank/pnpm-lock.yaml

      - name: 📦 Cache Cypress binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('P11-ArgentBank/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: 📦 Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: 🔧 Install Cypress binary
        run: pnpm exec cypress install

      - name: 🗃️ Generate Prisma Client
        run: |
          export DATABASE_URL="postgresql://user:password@localhost:5432/test"
          pnpm exec prisma generate

      - name: 🏗️ Build application
        run: pnpm run build

      - name: 📦 Install Vercel CLI
        run: npm install -g vercel@latest

      - name: 🔧 Setup Vercel for production deployment
        run: pnpm run vercel:config prod

      - name: 🚀 Deploy to Vercel Production
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "=== Deploying to production with vercel --prod ==="
          echo "Current directory: $(pwd)"
          echo "Root Directory configured: P11-ArgentBank"

          # Deploy to production using vercel CLI directly
          vercel --prod --yes --token $VERCEL_TOKEN

          # Set the production URL for Cypress tests
          PRODUCTION_URL="https://slm-argentbank.vercel.app"
          echo "VERCEL_PREVIEW_URL=$PRODUCTION_URL" >> $GITHUB_ENV
          echo "Production URL: $PRODUCTION_URL"

      - name: 🏃 Run Cypress E2E tests
        env:
          CYPRESS_BASE_URL: ${{ env.VERCEL_PREVIEW_URL }}
        run: |
          echo "Running Cypress E2E tests against: $CYPRESS_BASE_URL"
          pnpm exec cypress run --config baseUrl=$CYPRESS_BASE_URL

      - name: 📤 Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: P11-ArgentBank/cypress/screenshots

      - name: 📤 Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: P11-ArgentBank/cypress/videos

      - name: 💬 Comment PR with E2E results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              // Check if Cypress results exist
              const mochawesomeReport = path.join('P11-ArgentBank', 'cypress', 'reports', 'mochawesome-report.json');
              
              let status = '✅ E2E Tests: All tests passed';
              let details = 'All Cypress E2E tests completed successfully.';
              
              if (fs.existsSync(mochawesomeReport)) {
                const report = JSON.parse(fs.readFileSync(mochawesomeReport, 'utf8'));
                const { stats } = report;
                
                status = stats.failures > 0 ? 
                  `❌ E2E Tests: ${stats.failures} test(s) failed` :
                  `✅ E2E Tests: All ${stats.passes} tests passed`;
                
                details = `
                **Test Summary:**
                - ✅ Passed: ${stats.passes}
                - ❌ Failed: ${stats.failures}
                - ⏭️ Skipped: ${stats.skipped}
                - ⏱️ Duration: ${stats.duration}ms
                `;
              }
              
              const comment = `## 🏃 Cypress E2E Tests
              
              ${status}
              
              ${details}
              
              ${status.includes('❌') ? '⚠️ Please check the failed tests and fix the issues before merging.' : ''}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('E2E test report not found or invalid:', error.message);
              
              const comment = `## 🏃 Cypress E2E Tests
              
              ✅ E2E Tests completed (report details not available)
              
              Please check the workflow logs for detailed test results.
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  lighthouse-performance:
    name: ⚡ Lighthouse Performance
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"
          cache-dependency-path: P11-ArgentBank/pnpm-lock.yaml

      - name: 📦 Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: 🗃️ Generate Prisma Client
        run: |
          export DATABASE_URL="postgresql://user:password@localhost:5432/test"
          pnpm exec prisma generate

      - name: 🏗️ Build application
        run: pnpm run build

      - name: 🚀 Start application
        run: |
          pnpm run preview &
          sleep 10
          curl -f http://localhost:4173 || exit 1

      - name: ⚡ Run Lighthouse tests
        run: |
          # Install Lighthouse CLI globally
          npm install -g @lhci/cli@0.13.0

          # Create lighthouse config
          cat > lighthouserc.json << EOF
          {
            "ci": {
              "collect": {
                "url": ["http://localhost:4173", "http://localhost:4173/signin"],
                "startServerCommand": "",
                "numberOfRuns": 3
              },
              "assert": {
                "assertions": {
                  "categories:performance": ["error", {"minScore": 0.6}],
                  "categories:accessibility": ["error", {"minScore": 0.9}],
                  "categories:best-practices": ["error", {"minScore": 0.8}],
                  "categories:seo": ["error", {"minScore": 0.8}]
                }
              },
              "upload": {
                "target": "filesystem",
                "outputDir": "./lighthouse-reports"
              }
            }
          }
          EOF

          # Run Lighthouse CI
          lhci autorun || true

          # Generate summary
          echo "## ⚡ Lighthouse Performance Report" > lighthouse-summary.md
          echo "" >> lighthouse-summary.md

          if [ -d "./lighthouse-reports" ]; then
            echo "### Performance Metrics:" >> lighthouse-summary.md
            echo "- 🏠 **Home Page**: Analyzed" >> lighthouse-summary.md
            echo "- 🔐 **Sign-in Page**: Analyzed" >> lighthouse-summary.md
            echo "" >> lighthouse-summary.md
            echo "### Thresholds:" >> lighthouse-summary.md
            echo "- ⚡ Performance: ≥ 60%" >> lighthouse-summary.md
            echo "- ♿ Accessibility: ≥ 90%" >> lighthouse-summary.md
            echo "- ✅ Best Practices: ≥ 80%" >> lighthouse-summary.md
            echo "- 🔍 SEO: ≥ 80%" >> lighthouse-summary.md
            echo "" >> lighthouse-summary.md
            echo "✅ **Lighthouse analysis completed successfully**" >> lighthouse-summary.md
          else
            echo "❌ **Lighthouse analysis failed**" >> lighthouse-summary.md
          fi

      - name: 📤 Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: P11-ArgentBank/lighthouse-reports

      - name: 💬 Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            try {
              const summary = fs.readFileSync('P11-ArgentBank/lighthouse-summary.md', 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } catch (error) {
              console.log('Lighthouse summary not found:', error.message);
              
              const comment = `## ⚡ Lighthouse Performance
              
              ⚡ Lighthouse performance tests completed.
              
              Please check the workflow artifacts for detailed reports.
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  pa11y-accessibility:
    name: ♿ Pa11y Accessibility
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"
          cache-dependency-path: P11-ArgentBank/pnpm-lock.yaml

      - name: 📦 Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: 🗃️ Generate Prisma Client
        run: |
          export DATABASE_URL="postgresql://user:password@localhost:5432/test"
          pnpm exec prisma generate

      - name: 🏗️ Build application
        run: pnpm run build

      - name: 🚀 Start application
        run: |
          pnpm run preview &
          sleep 10
          curl -f http://localhost:4173 || exit 1

      - name: ♿ Run Pa11y accessibility tests
        run: |
          # Install Pa11y globally
          npm install -g pa11y@8.0.0

          # Create Pa11y configuration
          cat > .pa11yrc << EOF
          {
            "standard": "WCAG2AA",
            "timeout": 30000,
            "wait": 2000,
            "chromeLaunchConfig": {
              "args": ["--no-sandbox", "--disable-setuid-sandbox", "--disable-dev-shm-usage"]
            },
            "reporters": ["json", "cli"]
          }
          EOF

          # Test pages
          echo "## ♿ Pa11y Accessibility Report" > pa11y-summary.md
          echo "" >> pa11y-summary.md
          echo "### WCAG 2.1 AA Compliance Test Results:" >> pa11y-summary.md
          echo "" >> pa11y-summary.md

          # Test Home page
          echo "Testing Home page..." 
          if pa11y http://localhost:4173 --reporter json > pa11y-home.json 2>&1; then
            issues_count=$(jq length pa11y-home.json 2>/dev/null || echo "0")
            if [ "$issues_count" = "0" ]; then
              echo "- 🏠 **Home Page**: ✅ No accessibility issues found" >> pa11y-summary.md
            else
              echo "- 🏠 **Home Page**: ❌ $issues_count accessibility issue(s) found" >> pa11y-summary.md
            fi
          else
            echo "- 🏠 **Home Page**: ⚠️ Test failed to run" >> pa11y-summary.md
          fi

          # Test Sign-in page
          echo "Testing Sign-in page..."
          if pa11y http://localhost:4173/signin --reporter json > pa11y-signin.json 2>&1; then
            issues_count=$(jq length pa11y-signin.json 2>/dev/null || echo "0")
            if [ "$issues_count" = "0" ]; then
              echo "- 🔐 **Sign-in Page**: ✅ No accessibility issues found" >> pa11y-summary.md
            else
              echo "- 🔐 **Sign-in Page**: ❌ $issues_count accessibility issue(s) found" >> pa11y-summary.md
            fi
          else
            echo "- 🔐 **Sign-in Page**: ⚠️ Test failed to run" >> pa11y-summary.md
          fi

          # Calculate total issues
          total_issues=0
          if [ -f "pa11y-home.json" ]; then
            home_issues=$(jq length pa11y-home.json 2>/dev/null || echo "0")
            total_issues=$((total_issues + home_issues))
          fi

          if [ -f "pa11y-signin.json" ]; then
            signin_issues=$(jq length pa11y-signin.json 2>/dev/null || echo "0")
            total_issues=$((total_issues + signin_issues))
          fi

          echo "" >> pa11y-summary.md
          if [ "$total_issues" = "0" ]; then
            echo "🎉 **Result**: All pages are WCAG 2.1 AA compliant!" >> pa11y-summary.md
            echo "✅ **Status**: Ready for production" >> pa11y-summary.md
          else
            echo "⚠️ **Result**: $total_issues accessibility issue(s) found" >> pa11y-summary.md
            echo "❌ **Status**: Accessibility issues must be fixed before deployment" >> pa11y-summary.md
          fi

          # Create detailed reports directory
          mkdir -p pa11y-reports
          [ -f "pa11y-home.json" ] && cp pa11y-home.json pa11y-reports/
          [ -f "pa11y-signin.json" ] && cp pa11y-signin.json pa11y-reports/

          # Exit with error if issues found (this will fail the job)
          if [ "$total_issues" != "0" ]; then
            echo "❌ Pa11y found $total_issues accessibility issues. This is a blocking error."
            exit 1
          fi

      - name: 📤 Upload Pa11y reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pa11y-reports
          path: P11-ArgentBank/pa11y-reports

      - name: 💬 Comment PR with Pa11y results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            try {
              const summary = fs.readFileSync('P11-ArgentBank/pa11y-summary.md', 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } catch (error) {
              console.log('Pa11y summary not found:', error.message);
              
              const comment = `## ♿ Pa11y Accessibility Tests
              
              ♿ Pa11y accessibility tests completed.
              
              Please check the workflow logs for detailed results.
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
